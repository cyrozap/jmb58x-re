meta:
  chip: JMB58x
  license: CC-BY-SA-4.0

ranges:
  - name: PCIE_REGS_0
    start: 0x0000
    end: 0x0FFF
    permissions: RW
    notes: |
      Register addresses are aligned on 32-bit boundaries. That is, the first
      register in this region is at address 0x0000, the second at address
      0x0004, etc.
  - name: PCIE_REGS_1
    start: 0x1000
    end: 0x10FF
    permissions: RW
    notes: |
      Register addresses are indices. That is, the first register in this region
      is at address 0x1000, the second at address 0x1001, etc.
  - name: SATA_REGS
    start: 0x40000
    end: 0x40FFF
    permissions: RW
    notes: |
      Register addresses are indices. That is, the first register in this region
      is at address 0x40000, the second at address 0x40001, etc.

registers:
  bar5:
    - name: SPI_CFG0
      start: 0x00B4
      end: 0x00B7
      bits:
        - name: SCK_CSN_DELAY
          start: 0
          end: 3
          permissions: RW
          notes: |
            SCK-to-CSN delay, in 25 MHz clock cycles, minus 1.

            * 0: 1 cycle
            * ...
            * 15: 16 cycles
        - name: CLK_DIV
          start: 4
          end: 7
          permissions: RW
          notes: |
            SPI clock divisor, divided by 2, minus 1. To calculate the SPI base
            clock from a `CLK_DIV` value, use the following equation:
            `SPI base clock = 25 MHz / (2 * (CLK_DIV + 1))`

            To calculate the value of `CLK_DIV` needed to generate a particular
            SPI base clock, use the following equation:
            `CLK_DIV = 25 MHz / (2 * SPI base clock) - 1`

            The minimum and maximum SPI base clocks are 781.25 kHz and 12.5 MHz,
            respectively.
        - name: SPI_UNK
          start: 8
          end: 15
          permissions: RW
          notes: |
            Unknown bits, normally set to `0x80`.
        - name: ADDR_TX_EN
          start: 16
          end: 16
          permissions: RW
          notes: |
            When this bit is set, `ADDR_LEN` number of bytes will be transmitted
            from the `BUS_ADDRESS` register in the SPI transaction. When this
            bit is cleared, zero bytes will be transmitted from the
            `BUS_ADDRESS` register.
        - name: DUMMY_TX_EN
          start: 17
          end: 17
          permissions: RW
          notes: |
            When this bit is set, a dummy byte with the value zero will be
            transmitted after the address in the SPI transaction. This byte
            counts towards neither the number of address bytes nor the number of
            data bytes. This functionality is useful for commands like
            `RDSFDP (0x5A)`, which require a dummy byte to be transmitted after
            the address.
        - name: DATA_TX_EN
          start: 18
          end: 18
          permissions: RW
          notes: |
            When this bit is set, `DATA_LEN` number of bytes will be transmitted
            from the `SPI_DATA` register in the SPI transaction. When this bit
            is cleared, zero bytes will be transmitted from the `SPI_DATA`
            register.
        - name: DATA_RX_EN
          start: 19
          end: 19
          permissions: RW
          notes: |
            When this bit is set, `DATA_LEN` number of bytes will be received
            into the `SPI_DATA` register in the SPI transaction. When this bit
            is cleared, zero bytes will be received into the `SPI_DATA`
            register.
        - name: ADDR_LEN
          start: 20
          end: 21
          permissions: RW
          notes: |
            The number of address bytes to transmit from the `BUS_ADDRESS`
            register, minus 1, if `ADDR_TX_EN` is set.

            * 0: 1 Byte
            * 1: 2 Bytes
            * 2: 3 Bytes
            * 3: 4 Bytes
        - name: DATA_LEN
          start: 22
          end: 23
          permissions: RW
          notes: |
            The number of data bytes to receive into or transmit from the
            `SPI_DATA` register, minus 1. If `DATA_TX_EN` is set, this is the
            number of bytes to transmit. If `DATA_RX_EN` is set, this is the
            number of bytes to receive.

            * 0: 1 Byte
            * 1: 2 Bytes
            * 2: 3 Bytes
            * 3: 4 Bytes
        - name: CMD
          start: 24
          end: 31
          permissions: RW
          notes: |
            SPI command byte.
      notes: |
        SPI configuration register 0.
    - name: SPI_CFG1
      start: 0x00B8
      end: 0x00BB
      bits:
        - name: CLK_MUL
          start: 0
          end: 1
          permissions: RW
          notes: |
            SPI clock multiplier. The SPI base clock is multiplied by the number
            indicated to generate the SPI clock.

            * 0: Multiply by 1.
            * 1: Multiply by 3.
            * 2: Multiply by 6.
            * 3: Multiply by 9.
      notes: |
        SPI configuration register 1.
    - name: BUS_ADDRESS
      start: 0x00C0
      end: 0x00C3
      bits:
        - name: ADDRESS
          start: 0
          end: 23
          permissions: RW
          notes: |
            The address for the next bus access. When used for SPI access, the
            lowest two bits are transmitted as zeros.
        - name: ZERO
          start: 24
          end: 31
          permissions: RO
          notes: |
            Always reads as zero.
      notes: |
        Bus address register. The highest eight bits of this register are
        hardwired to zero, and the lowest two bits are read as zero by the SPI
        controller. So while the SPI controller is capable of transmitting up to
        four bytes from this register, only 24-bit addresses aligned to 32-bit
        word offsets are supported.
    - name: PCI_CFG_DATA
      start: 0x00C4
      end: 0x00C7
      permissions: RW
      notes: |
        PCI configuration space data register. Accessing this register starts a
        transaction on the PCI configuration space bus, reading or writing a PCI
        configuration space register at the register index specified in the
        `BUS_ADDRESS` register.
    - name: REG_DATA
      start: 0x00C8
      end: 0x00CB
      permissions: RW
      notes: |
        Internal register bus data register. Accessing this register starts a
        transaction on the internal register bus, reading or writing an internal
        register at the address specified in the `BUS_ADDRESS` register.
    - name: SPI_DATA
      start: 0x00CC
      end: 0x00CF
      permissions: RW
      notes: |
        SPI data register. Accessing this register starts an SPI transaction.

  cfg:
    - name: PCI_MSI_CAP
      start: 0x0090
      end: 0x00A7
      permissions: RW
      notes: |
        PCI MSI Capability. See the PCIe Base Specification for more
        information.
    - name: PCIE_L1_PM_SUBSTATES_ECAP
      start: 0x0900
      end: 0x090F
      permissions: RW
      notes: |
        PCIe L1 PM Substates Extended Capability. See the PCIe Base
        Specification for more information.

  reg:
    - name: PCIE_LINK_CAPABILITIES
      start: 0x1000
      end: 0x1000
      bits:
        - name: MAX_LINK_SPEED
          start: 0
          end: 1
          permissions: RW
          notes: |
            The maximum PCIe link speed to report to the host in the "Max Link
            Speed" field of the "Link Capabilities" register. The value in this
            field will also set the "Supported Link Speeds Vector" field in the
            "Link Capabilities 2" register to show that all link speeds up to
            and including the selected maximum link speed are supported.

            Note: Setting the value of this field to "3" will only set the "Max
            Link Speed" field of the "Link Capabilities" register to 16 GT/s and
            will not add the 16 GT/s link speed to the "Supported Link Speeds
            Vector" field in the "Link Capabilities 2" register.

            * 0: 2.5 GT/s
            * 1: 5 GT/s
            * 2: 8 GT/s
            * 3: 16 GT/s
        - name: MAX_LINK_WIDTH
          start: 2
          end: 2
          permissions: RW
          notes: |
            The maximum PCIe link width to report to the host in the "Maximum
            Link Width" field of the "Link Capabilities" register.

            * 0: x1
            * 1: x2
